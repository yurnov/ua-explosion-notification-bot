#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import requests
import os
from dotenv import load_dotenv
import time
from datetime import datetime
import pytz

"""
This is a simple telegram bot that every 30 secound get API http://alerts.net.ua/explosives_statuses_v2.json and send
message to telegram chat

Example of JSON answer:

{"version":2,"states":{"–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-25T07:36:13+00:00",
                        "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-23T20:21:31+00:00",
                        "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T11:11:20+00:00",
                        "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T22:40:52+00:00",
                        "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-23T20:53:41+00:00",
                        "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T21:53:05+00:00",
                        "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-21T02:23:32+00:00",
                        "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-21T02:28:59+00:00",
                        "–º. –ö–∏—ó–≤":"2024-03-25T08:30:22+00:00",
                        "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T00:47:42+00:00",
                        "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T07:35:19+00:00",
                        "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å":"2024-03-24T03:21:54+00:00"},
"info":{"last_update":"2024-03-25T09:33:52Z","last_id":126511}}

Bot send message only if date of last_id is changed and send message with all states that have changed date. Bot have
predefined list of regions that have changed date and send message only if this region is in this list.

Bot don't use telegram-python lib, just pure API call to telegram API.

"""

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv()
TOKEN = os.getenv("TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
URL = os.getenv("URL")
REGION_LIST = os.getenv("REGION_LIST").split(",") if os.getenv("REGION_LIST") else None
TIMEZONE = os.getenv("TIMEZONE")
SLIENT = os.getenv("SLIENT")

"""
Full list of regions:

["–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
"–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
"–º. –ö–∏—ó–≤", "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º", "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
"–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å", "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"]

"""

# Mapping of regions to grammatical case
regions_gram_case = {
    "–ê–≤—Ç–æ–Ω–æ–º–Ω–∞ –†–µ—Å–ø—É–±–ª—ñ–∫–∞ –ö—Ä–∏–º": "–ê–≤—Ç–æ–Ω–æ–º–Ω—ñ–π –†–µ—Å–ø—É–±–ª—ñ—Ü—ñ –ö—Ä–∏–º",
    "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–í–æ–ª–∏–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–î–æ–Ω–µ—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–î–æ–Ω–µ—Ü—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ó–∞–ø–æ—Ä—ñ–∑—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ö–∏—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–õ—å–≤—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–º. –ö–∏—ó–≤": "–º. –ö–∏—î–≤—ñ",
    "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ú–∏–∫–æ–ª–∞—ó–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–û–¥–µ—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–ü–æ–ª—Ç–∞–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–ü–æ–ª—Ç–∞–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–°—É–º—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–∞—Ä–∫—ñ–≤—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–•–µ—Ä—Å–æ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–µ—Ä—Å–æ–Ω—Å—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
    "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å": "–•–º–µ–ª—å–Ω–∏—Ü—å–∫—ñ–π –æ–±–ª–∞—Å—Ç—ñ",
}

MESSAGE = "üí•–ó–∞ –¥–∞–Ω–∏–º–∏ –ó–ú–Ü, –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ –≤–∏–±—É—Ö–∏ —É "

if not TOKEN or not CHAT_ID:
    logger.error("TOKEN or CHAT_ID is not defined in .env file or environment variables")
    exit()

if not URL:
    logger.warning(
        "URL is not defined in .env file, using a default URL http://alerts.net.ua/explosives_statuses_v2.json"
    )
    URL = "http://alerts.net.ua/explosives_statuses_v2.json"


if not REGION_LIST:
    logger.warning("REGION_LIST is not defined in .env file, using a default list of regions")
    # List of regions that bot will send message if date is changed
    REGION_LIST = [
        "–°—É–º—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–û–¥–µ—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ö–∏—ó–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–º. –ö–∏—ó–≤",
        "–ó–∞–ø–æ—Ä—ñ–∑—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–î–Ω—ñ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–•–º–µ–ª—å–Ω–∏—Ü—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–õ—å–≤—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
        "–í–æ–ª–∏–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å",
    ]
else:
    REGION_LIST = [region.strip('"') for region in REGION_LIST]

if not TIMEZONE:
    logger.warning("TIMEZONE is not defined in .env file, using a default timezone Europe/Kiev")
    TIMEZONE = "Europe/Kiev"

if not SLIENT or SLIENT.lower not in lower["true", "false"]:
    logger.warning("SLIENT is not defined in .env file, or not a boolean, using a default value false")
    SLIENT = "false"
else:
    SLIENT = SLIENT.lower()

logger.info(f"Bot started with CHAT_ID: {CHAT_ID} and SLIENT: {SLIENT}")
logger.info(f"Following regions will be monitored: {REGION_LIST}")


def get_data():
    try:
        response = requests.get(URL, timeout=15)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error while getting data: {e}")
        return None
    return response.json()


def send_message(text):
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage?chat_id={CHAT_ID}&disable_notification={SLIENT}&text={text}"
    try:
        response = requests.get(url, timeout=20)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"Error while sending message: {e}")
        return None
    return response.json()


def main():
    last_data = None

    while True:
        data = get_data()
        if not data:
            time.sleep(30)
            continue

        if last_data is None:
            last_data = data
        else:
            last_id = last_data["info"]["last_id"]
            current_id = data["info"]["last_id"]

            if current_id != last_id:
                states = data["states"]
                message = MESSAGE

                for region, date in states.items():
                    if region in REGION_LIST and date != last_data["states"].get(region):
                        logger.info(f"Explosion in region: {region}, date: {date}")

                        message += f"{regions_gram_case.get(region, region)} –æ {datetime\
                                        .strptime(date,'%Y-%m-%dT%H:%M:%S+00:00').replace(tzinfo=pytz.utc)\
                                        .astimezone(tz=pytz.timezone(TIMEZONE)).strftime('%H:%M')}\n"

                if message != MESSAGE:
                    message += "\n–ô–æ–±–∞–Ω–∞—Ä—É—Å–Ω—è!"
                    send_message(message)

                last_data = data

        time.sleep(30)


if __name__ == "__main__":
    main()
